const cron = require('node-cron');
const RealMatchParser = require('./realMatchParser');
const LogoService = require('./logoService');
const { getDatabase } = require('../database_mongo');

class Scheduler {
  constructor() {
    this.matchParser = new RealMatchParser();
    this.logoService = new LogoService();
    this.setupSchedules();
  }

  setupSchedules() {
    // –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ 09:00 –ú–°–ö
    cron.schedule('0 9 * * *', async () => {
      console.log('üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ 09:00 –ú–°–ö');
      await this.updateMatches('morning');
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    // –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ 19:00 –ú–°–ö
    cron.schedule('0 19 * * *', async () => {
      console.log('üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ 19:00 –ú–°–ö');
      await this.updateMatches('evening');
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π –≤ 02:00 –ú–°–ö (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ)
    cron.schedule('0 2 * * *', async () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π –≤ 02:00 –ú–°–ö');
      await this.cleanupOldMatches();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    console.log('‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω:');
    console.log('   üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 09:00 –ú–°–ö');
    console.log('   üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 19:00 –ú–°–ö');
    console.log('   üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π: 02:00 –ú–°–ö');
    console.log('   üìä –ü–æ 2 –º–∞—Ç—á–∞ –Ω–∞ —Å–ø–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)');
    console.log('   ‚ùå –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ API');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π (—É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º)
  async updateMatches(timeOfDay) {
    try {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º ${timeOfDay === 'morning' ? '—É—Ç—Ä–µ–Ω–Ω–µ–µ' : '–≤–µ—á–µ—Ä–Ω–µ–µ'} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...`);

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      this.matchParser.clearCache();
      this.logoService.clearCache();
      console.log('üíæ –û—á–∏—â–µ–Ω –∫–µ—à –º–∞—Ç—á–µ–π –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤');

      // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ API (–±–µ–∑ –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö)
      const newMatches = await this.matchParser.getTodayMatches();
      
      if (newMatches.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏–∑ API. –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ –≤ –±–∞–∑–µ.');
        return;
      }

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${newMatches.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏–∑ API`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
      await this.updateMatchStatuses();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
      await this.matchParser.saveMatchesToDatabase(newMatches);
      console.log('üíæ –ù–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      await this.logoService.updateAllTeamLogos();
      console.log('üé® –õ–æ–≥–æ—Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateStatistics();
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      console.log(`‚úÖ ${timeOfDay === 'morning' ? '–£—Ç—Ä–µ–Ω–Ω–µ–µ' : '–í–µ—á–µ—Ä–Ω–µ–µ'} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ${timeOfDay === 'morning' ? '—É—Ç—Ä–µ–Ω–Ω–µ–º' : '–≤–µ—á–µ—Ä–Ω–µ–º'} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:`, error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–µ–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏)
  async updateMatchStatuses() {
    try {
      const db = getDatabase();
      const today = this.getTodayString();
      const now = new Date();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayMatches = await db.collection('matches')
        .find({ match_date: today })
        .toArray();

      for (const match of todayMatches) {
        const matchTime = new Date(match.match_time);
        let newStatus = 'scheduled';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        if (now > matchTime) {
          // –ú–∞—Ç—á –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞—á–∞—Ç—å—Å—è
          const timeDiff = now - matchTime;
          
          // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
          if (match.sport === 'football' && timeDiff > 2 * 60 * 60 * 1000) { // 2 —á–∞—Å–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞
            newStatus = 'finished';
          } else if (match.sport === 'hockey' && timeDiff > 3 * 60 * 60 * 1000) { // 3 —á–∞—Å–∞ –¥–ª—è —Ö–æ–∫–∫–µ—è
            newStatus = 'finished';
          } else if (match.sport === 'baseball' && timeDiff > 4 * 60 * 60 * 1000) { // 4 —á–∞—Å–∞ –¥–ª—è –±–µ–π—Å–±–æ–ª–∞
            newStatus = 'finished';
          } else if (match.sport === 'esports' && timeDiff > 3 * 60 * 60 * 1000) { // 3 —á–∞—Å–∞ –¥–ª—è –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞
            newStatus = 'finished';
          } else {
            newStatus = 'live';
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (match.status !== newStatus) {
          await db.collection('matches').updateOne(
            { _id: match._id },
            { 
              $set: { 
                status: newStatus,
                status_updated_at: new Date()
              }
            }
          );
        }
      }

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å—ã –º–∞—Ç—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–µ–π:', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ)
  async cleanupOldMatches() {
    try {
      const db = getDatabase();
      const today = new Date();
      today.setDate(today.getDate() - 2); // –£–¥–∞–ª—è–µ–º –º–∞—Ç—á–∏ —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π
      const cutoffDate = today.toISOString().split('T')[0];
      
      const result = await db.collection('matches').deleteMany({ 
        match_date: { $lt: cutoffDate } 
      });
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π)`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async updateStatistics() {
    try {
      const db = getDatabase();
      
      // –ù–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
      const statsChange = {
        total_predictions: Math.floor(Math.random() * 10) + 1, // +1 –¥–æ +10
        success_rate_change: (Math.random() - 0.5) * 2, // -1% –¥–æ +1%
        active_bettors_change: Math.floor(Math.random() * 50) - 25, // -25 –¥–æ +25
        monthly_wins: Math.floor(Math.random() * 5) + 1 // +1 –¥–æ +5
      };

      await db.collection('stats').updateOne(
        {},
        {
          $inc: {
            total_predictions: statsChange.total_predictions,
            active_bettors: statsChange.active_bettors_change,
            monthly_wins: statsChange.monthly_wins
          },
          $set: {
            success_rate: Math.max(75, Math.min(85, 
              (await db.collection('stats').findOne({}))?.success_rate + statsChange.success_rate_change || 82.3
            )),
            updated_at: new Date()
          }
        },
        { upsert: true }
      );

      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:', statsChange);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  getTodayString() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualUpdate() {
    console.log('üîß –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...');
    await this.updateMatches('manual');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  getScheduleInfo() {
    return {
      morningUpdate: '09:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      eveningUpdate: '19:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', 
      oldMatchCleanup: '02:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      timezone: 'Europe/Moscow',
      matchesPerSport: 2,
      maxMatchesPerDay: 8,
      realDataOnly: true,
      noMockData: true
    };
  }
}

module.exports = Scheduler;