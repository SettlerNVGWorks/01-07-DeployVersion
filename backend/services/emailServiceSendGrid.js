const sgMail = require('@sendgrid/mail');
require('dotenv').config();

// Configure SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// Email verification template
const getVerificationEmailTemplate = (verificationLink, userName) => {
  return {
    to: undefined, // Will be set when sending
    from: {
      email: process.env.SENDGRID_FROM_EMAIL,
      name: '–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1'
    },
    subject: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email - –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1',
    html: `
      <!DOCTYPE html>
      <html>
      <head>
          <style>
              .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
              .header { 
                  background: linear-gradient(135deg, #fbbf24, #d97706); 
                  color: white; 
                  padding: 20px; 
                  text-align: center; 
                  border-radius: 8px 8px 0 0;
              }
              .content { 
                  padding: 30px; 
                  background: #ffffff;
                  border: 1px solid #fbbf24;
                  border-top: none;
              }
              .button { 
                  background: linear-gradient(135deg, #fbbf24, #d97706);
                  color: white; 
                  padding: 15px 30px; 
                  text-decoration: none; 
                  border-radius: 8px; 
                  display: inline-block; 
                  margin: 20px 0;
                  font-weight: bold;
              }
              .footer { 
                  background-color: #1f2937; 
                  color: #9ca3af;
                  padding: 20px; 
                  text-align: center; 
                  font-size: 12px;
                  border-radius: 0 0 8px 8px;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üëë –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–ü–û–†–¢ ‚Ññ1</h1>
                  <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Email</h2>
              </div>
              <div class="content">
                  <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å${userName ? ', ' + userName : ''}!</h2>
                  <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!</p>
                  <p>–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:</p>
                  <div style="text-align: center;">
                      <a href="${verificationLink}" class="button">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email</a>
                  </div>
                  <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
                  <p style="word-break: break-all; color: #6b7280; font-size: 14px;">${verificationLink}</p>
                  <p style="color: #dc2626; font-size: 14px;"><strong>‚è∞ –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</strong></p>
              </div>
              <div class="footer">
                  <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                  <p>¬© 2025 –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
              </div>
          </div>
      </body>
      </html>
    `
  };
};

// Send verification email using SendGrid
const sendVerificationEmailSendGrid = async (email, verificationToken, userName = '') => {
  try {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const verificationLink = `${frontendUrl}/verify-email?token=${verificationToken}`;
    
    const emailTemplate = getVerificationEmailTemplate(verificationLink, userName);
    emailTemplate.to = email;
    
    const result = await sgMail.send(emailTemplate);
    console.log('‚úÖ Verification email sent successfully to:', email);
    
    return {
      success: true,
      messageId: result[0].headers['x-message-id']
    };
    
  } catch (error) {
    console.error('‚ùå Error sending verification email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Send password reset email using SendGrid
const sendPasswordResetEmailSendGrid = async (email, resetToken, userName = '') => {
  try {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const resetLink = `${frontendUrl}/reset-password?token=${resetToken}`;
    
    const emailData = {
      to: email,
      from: {
        email: process.env.SENDGRID_FROM_EMAIL,
        name: '–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1'
      },
      subject: 'üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
                .header { 
                    background: linear-gradient(135deg, #dc2626, #991b1b); 
                    color: white; 
                    padding: 20px; 
                    text-align: center; 
                    border-radius: 8px 8px 0 0;
                }
                .content { 
                    padding: 30px; 
                    background: #ffffff;
                    border: 1px solid #dc2626;
                    border-top: none;
                }
                .button { 
                    background: linear-gradient(135deg, #dc2626, #991b1b);
                    color: white; 
                    padding: 15px 30px; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    display: inline-block; 
                    margin: 20px 0;
                    font-weight: bold;
                }
                .footer { 
                    background-color: #1f2937; 
                    color: #9ca3af;
                    padding: 20px; 
                    text-align: center; 
                    font-size: 12px;
                    border-radius: 0 0 8px 8px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
                </div>
                <div class="content">
                    <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${userName ? ', ' + userName : ''}!</h2>
                    <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</p>
                    <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</p>
                    <div style="text-align: center;">
                        <a href="${resetLink}" class="button">üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
                    </div>
                    <p style="color: #dc2626; font-size: 14px;"><strong>‚è∞ –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</strong></p>
                    <p style="color: #6b7280; font-size: 14px;">
                        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                    </p>
                </div>
                <div class="footer">
                    <p>¬© 2025 –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </div>
        </body>
        </html>
      `
    };
    
    const result = await sgMail.send(emailData);
    console.log('‚úÖ Password reset email sent successfully to:', email);
    
    return {
      success: true,
      messageId: result[0].headers['x-message-id']
    };
    
  } catch (error) {
    console.error('‚ùå Error sending password reset email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

module.exports = {
  sendVerificationEmail: sendVerificationEmailSendGrid,
  sendPasswordResetEmail: sendPasswordResetEmailSendGrid
};