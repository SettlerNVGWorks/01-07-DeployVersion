const { Telegraf, Markup } = require('telegraf');
const crypto = require('crypto');
const axios = require('axios');
require('dotenv').config();

// Configuration
const BOT_TOKEN = '8129667007:AAFtjzNz7aD121Rem8Ya0fUZhmAfyvBfNg4';
const WEBSITE_API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001/api';
const ADMIN_ID = parseInt(process.env.ADMIN_ID) || 123456789; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

const bot = new Telegraf(BOT_TOKEN);

// Store user data
const userData = new Map();

// Helper functions
const generateSecureToken = () => {
  return crypto.randomBytes(32).toString('hex');
};

// API calls to website backend
const websiteAPI = {
  // Check if user exists by telegram_user_id
  async getUserByTelegramId(telegramId) {
    try {
      const response = await axios.get(`${WEBSITE_API_URL}/auth/telegram-user/${telegramId}`);
      return response.data;
    } catch (error) {
      return null;
    }
  },

  // Create or link Telegram user to website
  async linkTelegramUser(telegramId, telegramUsername, firstName, lastName) {
    try {
      const response = await axios.post(`${WEBSITE_API_URL}/auth/telegram-link`, {
        telegram_user_id: telegramId,
        telegram_username: telegramUsername,
        first_name: firstName,
        last_name: lastName
      });
      return response.data;
    } catch (error) {
      console.error('Error linking Telegram user:', error);
      return null;
    }
  },

  // Confirm website auth
  async confirmWebsiteAuth(authToken, telegramUserInfo) {
    try {
      const response = await axios.post(`${WEBSITE_API_URL}/auth/telegram-confirm`, {
        auth_token: authToken,
        telegram_user_info: telegramUserInfo
      });
      return response.data;
    } catch (error) {
      console.error('Error confirming website auth:', error);
      return null;
    }
  }
};

// Main menu keyboard
const getMainMenuKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üåê –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'website_login')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
    [Markup.button.callback('üí≥ –£—Å–ª—É–≥–∏', 'services')],
    [Markup.button.callback('üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã', 'predictions')],
    [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance')],
    [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
    [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', process.env.FRONTEND_URL || 'http://localhost:3000')]
  ]);
};

// User profile menu
const getProfileKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üîó –°–≤—è–∑–∞—Ç—å —Å —Å–∞–π—Ç–æ–º', 'link_website')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
};

// Services menu
const getServicesKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üéØ –û—Ä–¥–∏–Ω–∞—Ä - 599‚ÇΩ', 'buy_single')],
    [Markup.button.callback('‚ö° –î–≤–æ–π–Ω–∏–∫ - 999‚ÇΩ', 'buy_double')],
    [Markup.button.callback('üöÄ –≠–∫—Å–ø—Ä–µ—Å—Å - 1999‚ÇΩ', 'buy_express')],
    [Markup.button.callback('üëë VIP –ö–∞–Ω–∞–ª', 'vip_plans')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
};

// Initialize user data
const initializeUser = (ctx) => {
  const userId = ctx.from.id;
  if (!userData.has(userId)) {
    userData.set(userId, {
      balance: 0,
      referrals: 0,
      referrals_list: [],
      website_linked: false,
      website_user_id: null,
      registration_date: new Date(),
      referrer_id: null
    });
  }
  return userData.get(userId);
};

// Start command handler
bot.start(async (ctx) => {
  const user = initializeUser(ctx);
  const args = ctx.message.text.split(' ');
  
  // Handle referral
  if (args.length > 1) {
    const param = args[1];
    
    // Handle website auth
    if (param.startsWith('auth_')) {
      const authToken = param.replace('auth_', '');
      return await handleWebsiteAuth(ctx, authToken);
    }
    
    // Handle referral
    if (param.match(/^\d+$/)) {
      const referrerId = parseInt(param);
      if (referrerId !== ctx.from.id && !user.referrer_id) {
        user.referrer_id = referrerId;
        
        // Add bonus to referrer
        if (userData.has(referrerId)) {
          const referrer = userData.get(referrerId);
          referrer.balance += 100;
          referrer.referrals += 1;
          referrer.referrals_list.push(ctx.from.id);
          
          // Notify referrer
          try {
            await ctx.telegram.sendMessage(referrerId, 
              `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +100‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.first_name}`
            );
          } catch (error) {
            console.log('Could not notify referrer');
          }
        }
      }
    }
  }

  // Check if user is linked to website
  const websiteUser = await websiteAPI.getUserByTelegramId(ctx.from.id);
  if (websiteUser) {
    user.website_linked = true;
    user.website_user_id = websiteUser.id;
  }

  const welcomeText = `üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–ü–û–†–¢ ‚Ññ1!

üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!

üéØ –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è:
‚Ä¢ –í—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã

${user.website_linked ? '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º' : '‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º'}

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referrals}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await ctx.reply(welcomeText, getMainMenuKeyboard());
});

// Handle website authentication
const handleWebsiteAuth = async (ctx, authToken) => {
  try {
    const telegramUserInfo = {
      id: ctx.from.id,
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name
    };

    const result = await websiteAPI.confirmWebsiteAuth(authToken, telegramUserInfo);
    
    if (result && result.success) {
      const user = initializeUser(ctx);
      user.website_linked = true;
      user.website_user_id = result.user_id;

      await ctx.reply(
        `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ!

üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –Ω–∞ —Å–∞–π—Ç "–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1"
üîó –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º

–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞.`,
        Markup.inlineKeyboard([
          [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', process.env.FRONTEND_URL || 'http://localhost:3000')],
          [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      );
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  } catch (error) {
    console.error('Website auth error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};

// Button handlers
bot.action('main_menu', async (ctx) => {
  const user = initializeUser(ctx);
  
  const menuText = `üèÜ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referrals}
${user.website_linked ? '‚úÖ –°–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º' : '‚ö†Ô∏è –ù–µ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await ctx.editMessageText(menuText, getMainMenuKeyboard());
});

bot.action('website_login', async (ctx) => {
  const loginText = `üåê –í–•–û–î –ù–ê –°–ê–ô–¢

–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Telegram:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ —ç—Ç–æ–º –±–æ—Ç–µ

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:`;

  await ctx.editMessageText(loginText, 
    Markup.inlineKeyboard([
      [Markup.button.url('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', process.env.FRONTEND_URL || 'http://localhost:3000')],
      [Markup.button.callback('üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'link_website')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ])
  );
});

bot.action('link_website', async (ctx) => {
  const user = initializeUser(ctx);
  
  if (user.website_linked) {
    await ctx.editMessageText(
      '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º!',
      Markup.inlineKeyboard([
        [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', process.env.FRONTEND_URL || 'http://localhost:3000')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ])
    );
    return;
  }

  // Try to link automatically
  const result = await websiteAPI.linkTelegramUser(
    ctx.from.id,
    ctx.from.username,
    ctx.from.first_name,
    ctx.from.last_name
  );

  if (result && result.success) {
    user.website_linked = true;
    user.website_user_id = result.user_id;

    await ctx.editMessageText(
      `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º!

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö`,
      Markup.inlineKeyboard([
        [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', process.env.FRONTEND_URL || 'http://localhost:3000')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ])
    );
  } else {
    await ctx.editMessageText(
      `üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞

–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å Telegram —Å —Å–∞–π—Ç–æ–º:

1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤—è–∑—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ

–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:`,
      Markup.inlineKeyboard([
        [Markup.button.url('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ', process.env.FRONTEND_URL || 'http://localhost:3000')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ])
    );
  }
});

bot.action('profile', async (ctx) => {
  const user = initializeUser(ctx);
  
  const profileText = `üë§ –í–ê–® –ü–†–û–§–ò–õ–¨

üÜî ID: ${ctx.from.id}
üë§ –ò–º—è: ${ctx.from.first_name}
üìß Username: ${ctx.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referrals}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.registration_date.toLocaleDateString('ru-RU')}

${user.website_linked ? 
  '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º' : 
  '‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º'
}

üìé –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/ByWin52Bot?start=${ctx.from.id}`;

  await ctx.editMessageText(profileText, getProfileKeyboard());
});

bot.action('services', async (ctx) => {
  const servicesText = `üí≥ –ù–ê–®–ò –£–°–õ–£–ì–ò

üéØ –û–†–î–ò–ù–ê–† ‚Äî 599‚ÇΩ
–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.8-2.2
–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: 98%

‚ö° –î–í–û–ô–ù–ò–ö ‚Äî 999‚ÇΩ  
–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–≤–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ—ç—Ñ. 1.99-2.5
–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: 95%

üöÄ –≠–ö–°–ü–†–ï–°–° ‚Äî 1999‚ÇΩ
–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π, –∫–æ—ç—Ñ. 3.5-6.5
–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: 99%

üëë VIP –ö–ê–ù–ê–õ
–¢–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –ù–µ–¥–µ–ª—è ‚Äî 3500‚ÇΩ
‚Ä¢ –ú–µ—Å—è—Ü ‚Äî 15000‚ÇΩ 
‚Ä¢ –ì–æ–¥ ‚Äî 50000‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:`;

  await ctx.editMessageText(servicesText, getServicesKeyboard());
});

bot.action('balance', async (ctx) => {
  const user = initializeUser(ctx);
  
  const balanceText = `üí∞ –í–ê–® –ë–ê–õ–ê–ù–°

üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0‚ÇΩ
üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referrals * 100}‚ÇΩ

üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:
${user.referrals > 0 ? `+${user.referrals * 100}‚ÇΩ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` : '–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç'}

üí° –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π (+100‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ –°–ë–ü`;

  await ctx.editMessageText(balanceText,
    Markup.inlineKeyboard([
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
      [Markup.button.url('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', process.env.FRONTEND_URL || 'http://localhost:3000')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ])
  );
});

bot.action('referrals', async (ctx) => {
  const user = initializeUser(ctx);
  
  const referralText = `üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê

üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referrals * 100}‚ÇΩ
üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referrals} —á–µ–ª–æ–≤–µ–∫

üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ: +100‚ÇΩ
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:
https://t.me/ByWin52Bot?start=${ctx.from.id}

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –û–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç –±–æ—Ç–∞  
3. –í–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 100‚ÇΩ
4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã

${user.referrals > 0 ? 
  `\n‚úÖ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referrals_list.length} —á–µ–ª–æ–≤–µ–∫` : 
  '\nüéØ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!'
}`;

  await ctx.editMessageText(referralText,
    Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ])
  );
});

// Purchase handlers
bot.action('buy_single', async (ctx) => {
  const user = initializeUser(ctx);
  
  if (user.balance >= 599) {
    user.balance -= 599;
    await ctx.editMessageText(
      `‚úÖ –û—Ä–¥–∏–Ω–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!

üéØ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
üí∞ –°–ø–∏—Å–∞–Ω–æ: 599‚ÇΩ
üí≥ –û—Å—Ç–∞—Ç–æ–∫: ${user.balance}‚ÇΩ

üìà –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º!`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ])
    );
    
    // Notify admin
    try {
      await ctx.telegram.sendMessage(ADMIN_ID, 
        `üí≥ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞: –û—Ä–¥–∏–Ω–∞—Ä\nüë§ ${ctx.from.first_name} (${ctx.from.id})\nüí∞ 599‚ÇΩ`
      );
    } catch (error) {
      console.log('Could not notify admin');
    }
  } else {
    await ctx.editMessageText(
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –ù—É–∂–Ω–æ: 599‚ÇΩ
üí≥ –£ –≤–∞—Å: ${user.balance}‚ÇΩ
üìä –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${599 - user.balance}‚ÇΩ

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å:`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã (+100‚ÇΩ)', 'referrals')],
        [Markup.button.url('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', process.env.FRONTEND_URL || 'http://localhost:3000')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'services')]
      ])
    );
  }
});

// Similar handlers for other purchases...
bot.action('buy_double', async (ctx) => {
  const user = initializeUser(ctx);
  
  if (user.balance >= 999) {
    user.balance -= 999;
    await ctx.editMessageText(`‚úÖ –î–≤–æ–π–Ω–∏–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: ${user.balance}‚ÇΩ`, 
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]]));
  } else {
    await ctx.editMessageText(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω—É–∂–Ω–æ 999‚ÇΩ)`, 
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'services')]]));
  }
});

bot.action('buy_express', async (ctx) => {
  const user = initializeUser(ctx);
  
  if (user.balance >= 1999) {
    user.balance -= 1999;
    await ctx.editMessageText(`‚úÖ –≠–∫—Å–ø—Ä–µ—Å—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: ${user.balance}‚ÇΩ`, 
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]]));
  } else {
    await ctx.editMessageText(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω—É–∂–Ω–æ 1999‚ÇΩ)`, 
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'services')]]));
  }
});

// Admin commands
bot.command('admin', async (ctx) => {
  if (ctx.from.id === ADMIN_ID) {
    const adminText = `üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userData.size}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${Array.from(userData.values()).reduce((sum, user) => sum + user.balance, 0)}‚ÇΩ

/broadcast - –†–∞—Å—Å—ã–ª–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/give [id] [amount] - –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å`;
    
    await ctx.reply(adminText);
  }
});

// Error handling
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
});

// Start bot
console.log('ü§ñ Starting integrated Telegram bot...');
bot.launch();

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

console.log('‚úÖ Integrated bot is running!');