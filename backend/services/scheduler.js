const cron = require('node-cron');
const RealMatchParser = require('./realMatchParser');
const { getDatabase } = require('../database_mongo');

class Scheduler {
  constructor() {
    this.matchParser = new RealMatchParser();
    this.setupSchedules();
  }

  setupSchedules() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 (–ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    cron.schedule('0 12 * * *', async () => {
      console.log('üïí –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π –≤ 12:00');
      await this.updateDailyMatches();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ—á—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π
    cron.schedule('0 0 * * *', async () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π –≤ –ø–æ–ª–Ω–æ—á—å');
      await this.cleanupOldMatches();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    console.log('‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω:');
    console.log('   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 (–ú–°–ö)');
    console.log('   üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 (–ú–°–ö)');
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π
  async updateDailyMatches() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π...');

      // –û—á–∏—â–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const today = this.getTodayString();
      const db = getDatabase();
      await db.collection('matches').deleteMany({ match_date: today });
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');

      // –û—á–∏—â–∞–µ–º –∫–µ—à
      this.matchParser.clearCache();
      console.log('üíæ –û—á–∏—â–µ–Ω –∫–µ—à –º–∞—Ç—á–µ–π');

      // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const newMatches = await this.matchParser.getTodayMatches();
      console.log(`üìä –°–ø–∞—Ä—Å–µ–Ω–æ ${newMatches.length} –Ω–æ–≤—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.matchParser.saveMatchesToDatabase(newMatches);
      console.log('üíæ –ù–æ–≤—ã–µ –º–∞—Ç—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateStatistics();
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π:', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–µ–∂–∏—Ö –º–∞—Ç—á–µ–π (–ø–æ 2 –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞)
  async generateFreshMatches() {
    const today = this.getTodayString();
    
    // –ú–∞—Å—Å–∏–≤—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    const teams = {
      football: [
        '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏', '–õ–∏–≤–µ—Ä–ø—É–ª—å', '–ü–°–ñ', '–ë–∞–≤–∞—Ä–∏—è',
        '–ò–Ω—Ç–µ—Ä', '–ú–∏–ª–∞–Ω', '–ê—Ä—Å–µ–Ω–∞–ª', '–ß–µ–ª—Å–∏', '–ê—Ç–ª–µ—Ç–∏–∫–æ', '–Æ–≤–µ–Ω—Ç—É—Å'
      ],
      hockey: [
        '–¶–°–ö–ê', '–°–ö–ê', '–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞', '–°–ø–∞—Ä—Ç–∞–∫', '–ê–≤–∞–Ω–≥–∞—Ä–¥', '–ú–µ—Ç–∞–ª–ª—É—Ä–≥',
        '–ê–∫ –ë–∞—Ä—Å', '–¢–æ—Ä–ø–µ–¥–æ', '–õ–æ–∫–æ–º–æ—Ç–∏–≤', '–°–∞–ª–∞–≤–∞—Ç –Æ–ª–∞–µ–≤', '–¢—Ä–∞–∫—Ç–æ—Ä', '–í–∏—Ç—è–∑—å'
      ],
      baseball: [
        'Yankees', 'Red Sox', 'Dodgers', 'Giants', 'Astros', 'Phillies',
        'Mets', 'Cubs', 'Cardinals', 'Braves', 'Blue Jays', 'Angels'
      ],
      esports: [
        'Navi', 'Astralis', 'G2 Esports', 'Fnatic', 'FaZe Clan', 'Team Liquid',
        'Cloud9', 'MOUZ', 'Vitality', 'NIP', 'ENCE', 'BIG'
      ]
    };

    const matches = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ 2 –º–∞—Ç—á–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    for (const [sport, sportTeams] of Object.entries(teams)) {
      for (let i = 0; i < 2; i++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const shuffled = [...sportTeams].sort(() => 0.5 - Math.random());
        const team1 = shuffled[0];
        const team2 = shuffled[1];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
        const hour = 16 + Math.floor(Math.random() * 6); // –û—Ç 16:00 –¥–æ 21:59
        const minute = Math.floor(Math.random() * 2) * 30; // 00 –∏–ª–∏ 30 –º–∏–Ω—É—Ç
        const matchTime = `${today} ${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        const odds1 = (1.4 + Math.random() * 2.0).toFixed(1); // 1.4 - 3.4
        const odds2 = (1.4 + Math.random() * 2.0).toFixed(1); // 1.4 - 3.4
        const oddsDraw = sport === 'football' ? (2.8 + Math.random() * 1.0).toFixed(1) : null;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        const analysis = await this.matchParser.getRandomAnalysis();

        matches.push({
          sport: sport,
          team1: team1,
          team2: team2,
          match_time: matchTime,
          odds_team1: parseFloat(odds1),
          odds_team2: parseFloat(odds2),
          odds_draw: oddsDraw ? parseFloat(oddsDraw) : null,
          analysis: analysis,
          source: 'daily_generator',
          match_date: today
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    matches.sort((a, b) => new Date(a.match_time) - new Date(b.match_time));

    return matches;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π
  async cleanupOldMatches() {
    try {
      const db = getDatabase();
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      const yesterdayString = yesterday.toISOString().split('T')[0];
      
      await db.collection('matches').deleteMany({ 
        match_date: { $lt: yesterdayString } 
      });
      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async updateStatistics() {
    try {
      const db = getDatabase();
      
      // –ù–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
      const statsChange = {
        total_predictions: Math.floor(Math.random() * 10) + 1, // +1 –¥–æ +10
        success_rate_change: (Math.random() - 0.5) * 2, // -1% –¥–æ +1%
        active_bettors_change: Math.floor(Math.random() * 50) - 25, // -25 –¥–æ +25
        monthly_wins: Math.floor(Math.random() * 5) + 1 // +1 –¥–æ +5
      };

      await db.collection('stats').updateOne(
        {},
        {
          $inc: {
            total_predictions: statsChange.total_predictions,
            active_bettors: statsChange.active_bettors_change,
            monthly_wins: statsChange.monthly_wins
          },
          $set: {
            success_rate: Math.max(75, Math.min(85, 
              (await db.collection('stats').findOne({}))?.success_rate + statsChange.success_rate_change || 82.3
            )),
            updated_at: new Date()
          }
        },
        { upsert: true }
      );

      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:', statsChange);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  getTodayString() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualUpdate() {
    console.log('üîß –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...');
    await this.updateDailyMatches();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  getScheduleInfo() {
    return {
      dailyMatchUpdate: '12:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      oldMatchCleanup: '00:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      timezone: 'Europe/Moscow'
    };
  }
}

module.exports = Scheduler;